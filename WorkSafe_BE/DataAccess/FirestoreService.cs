using Google.Cloud.Firestore;
using System.Diagnostics;
using WorkSafe_BE.Models;

namespace WorkSafe_BE.DataAccess
{
    public class FirestoreService : IDatabaseService
    {
        public FirestoreService()
        {
            string credential_path = @"./DataAccess/worksafe-f99a3-dfd3441ac6fd.json";
            System.Environment.SetEnvironmentVariable("GOOGLE_APPLICATION_CREDENTIALS", credential_path);
            _db = FirestoreDb.Create(_projectId);
        }

        private FirestoreDb _db;
        private string _projectId = "worksafe-f99a3";

        /// <summary>
        /// Adds a Project to Firestore
        /// </summary>
        /// <param name="project">A ProjectModel containing the Project to add</param>
        /// <returns>The autogenerated Id of the project as a string</returns>
        public async Task<String> AddProject(ProjectModel project)
        {
            DocumentReference docRef = _db.Collection("Projects").Document();
            Dictionary<string, object> projectDictionary = new Dictionary<string, object>
            {
                { "Id", docRef.Id },
                { "Title", project.Title },
                { "Description", project.Description },
                { "TimeStamp", Timestamp.FromDateTime(project.TimeStamp) },
                { "OwnerName", project.Owner.Name },
                { "OwnerEmail", project.Owner.Email }

            };
            await docRef.SetAsync(projectDictionary);
            return docRef.Id;
        }

        /// <summary>
        /// Gets a Project by Id
        /// </summary>
        /// <param name="id">The id of the project as a string</param>
        /// <returns>A ProjectModel containing the project</returns>
        public async Task<ProjectModel> GetProject(string id)
        {
            var project = new ProjectModel();
            project.Id = id;
            DocumentReference docRef = _db.Collection("Projects").Document(id);
            DocumentSnapshot document = await docRef.GetSnapshotAsync();
            Dictionary<string, object> documentDictionary = document.ToDictionary();
            project.Description = (String)documentDictionary["Description"];
            project.Title = (String)documentDictionary["Title"];
            project.Owner = new UserModel((String)documentDictionary["OwnerName"], (String)documentDictionary["OwnerEmail"]);
            project.TimeStamp = ((Timestamp)documentDictionary["TimeStamp"]).ToDateTime();
            return project;
        }

        /// <summary>
        /// Gets a list of all projects from firebase
        /// </summary>s
        /// <returns>A list of ProjectModels</returns>
        public async Task<List<ProjectModel>> GetProjects()
        {
            var output = new List<ProjectModel>();
            CollectionReference projectsRef = _db.Collection("Projects");
            QuerySnapshot snapshot = await projectsRef.GetSnapshotAsync();
            foreach (DocumentSnapshot document in snapshot.Documents)
            {
                var project = new ProjectModel();
                project.Id = document.Id;
                Dictionary<string, object> documentDictionary = document.ToDictionary();
                project.Description = (String)documentDictionary["Description"];
                project.Title = (String)documentDictionary["Title"];
                project.TimeStamp = ((Timestamp)documentDictionary["TimeStamp"]).ToDateTime();
                output.Add(project);
            }

            return output;
        }
    }
}
